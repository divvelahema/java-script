: let mypromise = new promise((resolve,reject) = > {
Let success =true;
If(success ){
resolve (“the operation is successfull);
}else{
reject (“the operation failed”)
}
});
my promise
.then(result = >{
Console.log(result);
});
.catch(error = >{
Console.log(error);
}

let promise=new Promise((resolve ,reject) =>{
resolve(5);
})
promise
.then(result =>{
Console.log(result);
return result *2
//return a new value
})
.then(result =>{
Console.log(result);
return result +3
//return a new value
})
.then(result=>{
console.log(result);

})
.catch(error=>{
Console.log("error" ,error))
})
  
Output :    5
                  10
                  13

PROMISE :
	---- a promise a special javascript object that represents the eventual completion (or failure ) of an asynchronous operations.
	It allows to handle asynchronous tasks more efficiently than callbacks.

THREE STATES : 
1)	PENDING : the initial state , the promise is still waiting for the operation to finish.
2)	Fulfilled : the operation completed successfully
3)	Rejected : the operation failed;


EXP :
1)	To create a promise – new promise ()
Two parameters-
Resolve --- to mark the promise as successfully 
Reject :  mark it as failed 


2)	Handling the result :

	Then () method is called when promise is fulfilled.
It will receives the result from resolve ().

	.catch() method is called if the promise is rejected .
It receives the error message from reject.

